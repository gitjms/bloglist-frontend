npm init
npx create-react-app bloglist
npm install axios --save
npm install json-server --save-dev
npx json-server --port=3001 --watch db.json
TAI
npm install -g json-server (globaalisti koneelle)

npm start

-------------------------------------------------------
TESTAUS

npm install --save-dev jest

npm test (kaikki testit)

npm test -- -t 'testin nimi' (yksi testi)

JEST-DEBUGGAUS
Place a debugger; statement in any of your tests, and then,
in your project's directory, run:

node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]

sitten Chromessa:

chrome://inspect -> click on "Open Dedicated DevTools for Node"

tai

node --inspect index.js

---------------

TAI VS CODESSA:

node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]

launch.json config:

{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "attach",
      "name": "Attach",
      "port": 9229
    }
  ]
}

TAI

VS CODEEn pysyvät configit:

launch.json config (backend):

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/jest/bin/jest.js",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "port": 9229
    }
  ]
}

launch.json config (frontend, eli kun luotu create-react-app):

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug CRA Tests",
      "type": "node",
      "request": "launch",
      "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/react-scripts",
      "args": ["test", "--runInBand", "--no-cache", "--env=jsdom"],
      "cwd": "${workspaceRoot}",
      "protocol": "inspector",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}


REACT-SCROLL (SCROLL TO ERROR)

npm install react-scroll

-------------------------------------------------------

npm install --save prop-types

-------------------------------------------------------
ESLINT

Ei tarvitse eslint --init, koska create-react-app
asentaa sen valmiiksi

npm install --save-dev eslint-plugin-jest

-------------------------------------------------------
TEST

npm install --save-dev @testing-library/react @testing-library/jest-dom

npm test <- watch-moodissa (konsoli odottaa muutoksia koodissa)

CI=true npm test <- normaali testi-moodi

CI=true npm test -- 'tietty testi tai osio'

CI=true npm test -- --coverage

-------
CYPRESS

npm install --save-dev cypress

npm install eslint-plugin-cypress --save-dev

(You can now open Cypress by running:
node_modules\.bin\cypress open)

"scripts": {
    ...
    "cypress:open": "cypress open",
    "test:e2e": "cypress run"
    ...

backendille npm-skripti:
"scripts": {
    ...
    "start:test": "cross-env NODE_ENV=test node index.js"
    ...

Järjestelmän tulee olla käynnissä kun testit suoritetaan:

backend: npm run start:test
frontend: npm start

frontend: npm run cypress:open (graafinen)
TAI
frontend: npm run test:e2e (komentoikkuna)







